{
	"API Handler": {
		"scope": "typescript",
		"prefix": "method",
		"body": [
			"import type { Context, Next } from 'hono'",
			"import { createFactory } from 'hono/factory'",
			"import { ApiError } from '@shared/utils'",
			"",
			"const factory = createFactory()",
			"",
			"const ${1:handlerName} = factory.createHandlers(async (ctx: Context, next: Next) => {",
			"  try {",
			"    const body = await ctx.req.json()",
			"    const result = ${2:schema}.safeParse(body)",
			"    ",
			"    if (!result.success) {",
			"      throw ApiError.BadRequest()",
			"    }",
			"    ",
			"    // Business logic here",
			"    ",
			"    return ctx.json({ success: true })",
			"  } catch (error) {",
			"    if (error instanceof ApiError) {",
			"      throw error;",
			"    } else {",
			"      throw ApiError.Internal();",
			"    }",
			"  }",
			"})",
			"",
			"export default ${1:handlerName}"
		],
		"description": "Create a new API handler with error handling"
	}
}