"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.toneOpacity = exports.getRGBA = exports.isColorDescriptionStatic = exports.isColorDescriptionCallable = exports.isColorWithStates = void 0;
var hexToRgb = function (hex) {
    var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
    return result
        ? "".concat(parseInt(result[1], 16), ", ").concat(parseInt(result[2], 16), ", ").concat(parseInt(result[3], 16))
        : '';
};
function isColorWithStates(value) {
    return (value &&
        typeof value === 'object' &&
        typeof value['normal'] === 'string' &&
        typeof value['hover'] === 'string' &&
        typeof value['active'] === 'string');
}
exports.isColorWithStates = isColorWithStates;
function isColorDescriptionCallable(value) {
    return typeof value === 'function';
}
exports.isColorDescriptionCallable = isColorDescriptionCallable;
function isColorDescriptionStatic(value) {
    return typeof value === 'string' || isColorWithStates(value);
}
exports.isColorDescriptionStatic = isColorDescriptionStatic;
/**
 * @deprecated
 * @use toneOpacity
 * TODO: remove
 */
function getRGBA(color, opacity) {
    if (isColorDescriptionStatic(color)) {
        if (isColorWithStates(color)) {
            return "rgba(".concat(hexToRgb(color.normal), ", ").concat(opacity, ")");
        }
        return "rgba(".concat(hexToRgb(color), ", ").concat(opacity, ")");
    }
    return function (theme) {
        return getRGBA(color(theme), opacity);
    };
}
exports.getRGBA = getRGBA;
function toneOpacity(color, opacity) {
    return getRGBA(color, opacity);
}
exports.toneOpacity = toneOpacity;
