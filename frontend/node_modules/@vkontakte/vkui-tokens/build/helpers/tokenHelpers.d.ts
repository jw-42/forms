import type { Property } from 'csstype';
import { ThemeDescription } from '../../interfaces/general';
import { Token } from '../../interfaces/general/tools/tokenValue';
export type TokenFunction<T extends ThemeDescription> = (theme: Partial<T>) => Token<any, T>;
export type NamedTokenFunction<T extends ThemeDescription> = (theme: Partial<T>) => [string | undefined, Token<any, T>];
export type OpacityPoint = [number, number];
/**
 * Функция выполняет подстановку значения другого токена.
 * @param token Имя токена. Можно использовать токены из текущей темы либо из всех тем,
 * от которой наследуется текущая.
 */
export declare function alias<T extends ThemeDescription>(token: string): TokenFunction<T>;
/**
 * Функция создаёт runtime-ссылку на другой токен темы выполняет подстановку fallback-значения этого токена.
 * @param token Имя токена. Можно использовать токены из текущей темы либо из всех тем,
 * от которой наследуется текущая.
 */
export declare function namedAlias<T extends ThemeDescription>(token: string): NamedTokenFunction<T>;
/**
 * Функция создаёт runtime-ссылку на другой токен темы.
 * @param token Имя токена. Можно использовать любые токены, которые находятся в контексте страницы.
 */
export declare function staticRef<T>(value: Token<T, any>): T;
export declare function gradient<T extends ThemeDescription>(...stops: (Property.Color | NamedTokenFunction<T>)[]): TokenFunction<T>;
