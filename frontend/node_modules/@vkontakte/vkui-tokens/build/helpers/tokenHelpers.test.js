"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var globals_1 = require("@jest/globals");
var tokenHelpers_1 = require("./tokenHelpers");
(0, globals_1.describe)('tokenHelpers', function () {
    (0, globals_1.describe)('alias', function () {
        (0, globals_1.test)('maps token to another token', function () {
            (0, globals_1.expect)((0, tokenHelpers_1.alias)('sizeArrow')({ sizeArrow: { regular: 10 } })).toEqual({
                regular: 10,
            });
        });
    });
    (0, globals_1.describe)('namedAlias', function () {
        (0, globals_1.test)('maps token to another token, preserving name', function () {
            (0, globals_1.expect)((0, tokenHelpers_1.namedAlias)('sizeArrow')({ sizeArrow: { regular: 10 } })).toEqual([
                'sizeArrow',
                {
                    regular: 10,
                },
            ]);
        });
    });
    (0, globals_1.describe)('staticRef', function () {
        (0, globals_1.test)('returns static value', function () {
            (0, globals_1.expect)((0, tokenHelpers_1.staticRef)(10)).toEqual(10);
        });
        (0, globals_1.test)('fails for dynamic value', function () {
            (0, globals_1.expect)(function () { return (0, tokenHelpers_1.staticRef)((0, tokenHelpers_1.alias)('sizeArrow')); }).toThrowError('Cannot use callable token value in static ref');
        });
    });
    (0, globals_1.describe)('gradient', function () {
        (0, globals_1.test)('calculates gradient string from 1 color with value', function () {
            var gradientToken = (0, tokenHelpers_1.gradient)('blue');
            var gradientValue = gradientToken({});
            (0, globals_1.expect)(gradientValue).toEqual([
                'rgba(0, 0, 255, 0) 0%',
                'rgba(0, 0, 255, 0.05) 15%',
                'rgba(0, 0, 255, 0.2) 30%',
                'rgba(0, 0, 255, 0.8) 70%',
                'rgba(0, 0, 255, 0.95) 85%',
                'rgba(0, 0, 255, 1) 100%',
            ].join(', '));
        });
        (0, globals_1.test)('calculates gradient string from 1 color with variable', function () {
            var gradientToken = (0, tokenHelpers_1.gradient)((0, tokenHelpers_1.namedAlias)('colorIconPrimary'));
            var gradientValue = gradientToken({ colors: { colorIconPrimary: 'blue' } });
            (0, globals_1.expect)(gradientValue).toEqual([
                'rgba(0, 0, 255, 0) 0%',
                'rgba(0, 0, 255, 0.05) 15%',
                'rgba(0, 0, 255, 0.2) 30%',
                'rgba(0, 0, 255, 0.8) 70%',
                'rgba(0, 0, 255, 0.95) 85%',
                'var(--vkui--color_icon_primary, rgba(0, 0, 255, 1)) 100%',
            ].join(', '));
        });
        (0, globals_1.test)('calculates gradient string from 2 colors', function () {
            var gradientToken = (0, tokenHelpers_1.gradient)((0, tokenHelpers_1.namedAlias)('colorIconPrimary'), 'transparent');
            var gradientValue = gradientToken({ colors: { colorIconPrimary: 'blue' } });
            (0, globals_1.expect)(gradientValue).toEqual('var(--vkui--color_icon_primary, rgba(0, 0, 255, 1)) 0%, rgba(0, 0, 0, 0) 100%');
        });
        (0, globals_1.test)('calculates gradient string from 3 colors', function () {
            var gradientToken = (0, tokenHelpers_1.gradient)('blue', 'black', 'red');
            var gradientValue = gradientToken({});
            (0, globals_1.expect)(gradientValue).toEqual('rgba(0, 0, 255, 1) 0%, rgba(0, 0, 0, 1) 50%, rgba(255, 0, 0, 1) 100%');
        });
    });
});
