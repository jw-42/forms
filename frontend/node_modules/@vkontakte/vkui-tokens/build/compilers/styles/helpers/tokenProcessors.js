"use strict";
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var _a, _b, _c, _d;
Object.defineProperty(exports, "__esModule", { value: true });
exports.processGroupToken = exports.customMediaDeclaration = exports.mixinDeclaration = exports.variablesStatementDeclaration = exports.varDeclarations = exports.EStyleTypes = void 0;
var common_tags_1 = require("common-tags");
var unCamelcasify_1 = require("../../../helpers/unCamelcasify");
exports.EStyleTypes = {
    CSS: 'css',
    SCSS: 'scss',
    PCSS: 'pcss',
    LESS: 'less',
    STYL: 'styl',
};
exports.varDeclarations = (_a = {},
    _a[exports.EStyleTypes.CSS] = function (prop, prefix) {
        if (prefix === void 0) { prefix = ''; }
        return "--".concat(prefix).concat((0, unCamelcasify_1.unCamelcasify)(prop, '_'));
    },
    _a[exports.EStyleTypes.PCSS] = function (prop, prefix) {
        if (prefix === void 0) { prefix = '_'; }
        return "--".concat(prefix).concat((0, unCamelcasify_1.unCamelcasify)(prop));
    },
    _a[exports.EStyleTypes.SCSS] = function (prop, prefix) {
        if (prefix === void 0) { prefix = ''; }
        return "$".concat(prefix).concat((0, unCamelcasify_1.unCamelcasify)(prop));
    },
    _a[exports.EStyleTypes.LESS] = function (prop, prefix) {
        if (prefix === void 0) { prefix = ''; }
        return "@".concat(prefix).concat((0, unCamelcasify_1.unCamelcasify)(prop));
    },
    _a[exports.EStyleTypes.STYL] = function (prop, prefix) {
        if (prefix === void 0) { prefix = ''; }
        return "$".concat(prefix).concat((0, unCamelcasify_1.unCamelcasify)(prop));
    },
    _a);
exports.variablesStatementDeclaration = (_b = {},
    _b[exports.EStyleTypes.CSS] = function (key, token, postfix) {
        if (postfix === void 0) { postfix = ''; }
        return "\t".concat(key).concat(postfix, ": ").concat(token, ";\n");
    },
    _b[exports.EStyleTypes.PCSS] = function (key, token, postfix) {
        if (postfix === void 0) { postfix = ''; }
        return "\t".concat(key).concat(postfix, ": ").concat(token, ";\n");
    },
    _b[exports.EStyleTypes.SCSS] = function (key, token, postfix) {
        if (postfix === void 0) { postfix = ''; }
        return "".concat(key).concat(postfix, ": ").concat(token, ";\n");
    },
    _b[exports.EStyleTypes.LESS] = function (key, token, postfix) {
        if (postfix === void 0) { postfix = ''; }
        return "".concat(key).concat(postfix, ": ").concat(token, ";\n");
    },
    _b[exports.EStyleTypes.STYL] = function (key, token, postfix) {
        if (postfix === void 0) { postfix = ''; }
        return "".concat(key).concat(postfix, " = ").concat(token, ";\n");
    },
    _b);
exports.mixinDeclaration = (_c = {},
    _c[exports.EStyleTypes.SCSS] = function (groupName, prefix, postfix) {
        if (prefix === void 0) { prefix = ''; }
        if (postfix === void 0) { postfix = ''; }
        return "@mixin ".concat(prefix).concat((0, unCamelcasify_1.unCamelcasify)(groupName)).concat(postfix, "()");
    },
    _c[exports.EStyleTypes.CSS] = function (groupName, prefix, postfix) {
        if (prefix === void 0) { prefix = ''; }
        if (postfix === void 0) { postfix = ''; }
        return ".".concat(prefix).concat((0, unCamelcasify_1.unCamelcasify)(groupName, '_')).concat(postfix);
    },
    _c[exports.EStyleTypes.PCSS] = function (groupName, prefix, postfix) {
        if (prefix === void 0) { prefix = ''; }
        if (postfix === void 0) { postfix = ''; }
        return "%".concat(prefix).concat((0, unCamelcasify_1.unCamelcasify)(groupName)).concat(postfix);
    },
    _c[exports.EStyleTypes.LESS] = function (groupName, prefix, postfix) {
        if (prefix === void 0) { prefix = ''; }
        if (postfix === void 0) { postfix = ''; }
        return ".".concat(prefix).concat((0, unCamelcasify_1.unCamelcasify)(groupName)).concat(postfix);
    },
    _c[exports.EStyleTypes.STYL] = function (groupName, prefix, postfix) {
        if (prefix === void 0) { prefix = ''; }
        if (postfix === void 0) { postfix = ''; }
        return "".concat(prefix).concat((0, unCamelcasify_1.unCamelcasify)(groupName)).concat(postfix, "()");
    },
    _c);
exports.customMediaDeclaration = (_d = {},
    _d[exports.EStyleTypes.CSS] = null,
    _d[exports.EStyleTypes.PCSS] = function (key, token, postfix) {
        if (postfix === void 0) { postfix = ''; }
        return "@custom-media --".concat((0, unCamelcasify_1.unCamelcasify)(key)).concat(postfix, " ").concat(token, ";\n");
    },
    _d[exports.EStyleTypes.SCSS] = function (key, token, postfix) {
        if (postfix === void 0) { postfix = ''; }
        return "".concat((0, common_tags_1.stripIndent)(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n\t\t@mixin media-", "", " {\n\t\t\t@media ", " { @content; }\n\t\t}"], ["\n\t\t@mixin media-", "", " {\n\t\t\t@media ", " { @content; }\n\t\t}"])), (0, unCamelcasify_1.unCamelcasify)(key), postfix, token), "\n");
    },
    _d[exports.EStyleTypes.LESS] = function (key, token, postfix) {
        if (postfix === void 0) { postfix = ''; }
        return "".concat((0, common_tags_1.stripIndent)(templateObject_2 || (templateObject_2 = __makeTemplateObject(["\n\t\t.media-", "", "(@content) {\n\t\t\t@media ", " { @content; }\n\t\t}"], ["\n\t\t.media-", "", "(@content) {\n\t\t\t@media ", " { @content; }\n\t\t}"])), (0, unCamelcasify_1.unCamelcasify)(key), postfix, token), "\n");
    },
    _d[exports.EStyleTypes.STYL] = function (key, token, postfix) {
        if (postfix === void 0) { postfix = ''; }
        return "".concat((0, common_tags_1.stripIndent)(templateObject_3 || (templateObject_3 = __makeTemplateObject(["\n\t\tmedia-", "", "(content) {\n\t\t\t@media ", " { content }\n\t\t}"], ["\n\t\tmedia-", "", "(content) {\n\t\t\t@media ", " { content }\n\t\t}"])), (0, unCamelcasify_1.unCamelcasify)(key), postfix, token), "\n");
    },
    _d);
var defineMapProperty = function (subKey, subToken) {
    var _a;
    var displayValue = subToken;
    if ((_a = displayValue.includes) === null || _a === void 0 ? void 0 : _a.call(displayValue, ',')) {
        displayValue = "\"".concat(displayValue, "\"");
    }
    return "\t'".concat(subKey, "': ").concat(displayValue, ",\n");
};
// eslint-disable-next-line sonarjs/cognitive-complexity,max-lines-per-function
function processGroupToken(_a) {
    var format = _a.format, token = _a.token, key = _a.key, prefix = _a.prefix, _b = _a.adaptiveMode, adaptiveMode = _b === void 0 ? 'none' : _b;
    var needUpdateVariables = format === exports.EStyleTypes.CSS;
    var needMap = format === exports.EStyleTypes.SCSS;
    var needAddAdaptiveClasses = (adaptiveMode === 'withAdaptiveGroups' || adaptiveMode === 'onlyAdaptiveGroups') &&
        format === exports.EStyleTypes.CSS;
    var defineStyleProperty = function (subKey, subToken, varName) {
        var result = "\t".concat((0, unCamelcasify_1.unCamelcasify)(subKey), ": ").concat(subToken, ";\n");
        if (needUpdateVariables) {
            result += "\t".concat((0, unCamelcasify_1.unCamelcasify)(subKey), ": var(").concat(varName, ", ").concat(subToken, ");\n");
        }
        return result;
    };
    var variables = '';
    var groupTokens = '';
    var adaptiveGroup = '';
    var addedAdaptiveGroup = false;
    var map = '';
    // адаптивная группа
    if ('regular' in token) {
        Object.keys(token).forEach(function (adaptivityState) {
            groupTokens += "".concat(exports.mixinDeclaration[format](key, prefix, "--".concat((0, unCamelcasify_1.unCamelcasify)(adaptivityState))), " {\n");
            if (needAddAdaptiveClasses && !addedAdaptiveGroup) {
                adaptiveGroup += "".concat(exports.mixinDeclaration[format](key, prefix), " {\n");
            }
            if (needMap) {
                map += "".concat(exports.varDeclarations.scss(key, prefix), "--").concat((0, unCamelcasify_1.unCamelcasify)(adaptivityState), "--map: (\n");
            }
            Object.entries(__assign(__assign({}, token.regular), token[adaptivityState])).forEach(function (_a) {
                var subKey = _a[0], subValue = _a[1];
                var varName = '';
                if (needUpdateVariables) {
                    var reallyNewToken = token[adaptivityState][subKey] !== undefined;
                    varName = "".concat(exports.varDeclarations.css(key, prefix), "--").concat((0, unCamelcasify_1.unCamelcasify)(subKey, '_'), "--").concat(reallyNewToken ? (0, unCamelcasify_1.unCamelcasify)(adaptivityState, '_') : 'regular');
                    if (reallyNewToken) {
                        variables += exports.variablesStatementDeclaration.css(varName, subValue);
                    }
                }
                groupTokens += defineStyleProperty(subKey, subValue, varName);
                if (needAddAdaptiveClasses && !addedAdaptiveGroup) {
                    adaptiveGroup += "\t".concat((0, unCamelcasify_1.unCamelcasify)(subKey), ": var(").concat(varName.replace(new RegExp("--(regular|".concat(adaptivityState, ")$")), ''), ");\n");
                }
                if (needMap) {
                    map += defineMapProperty(subKey, subValue);
                }
            });
            groupTokens += '}\n';
            if (needAddAdaptiveClasses && !addedAdaptiveGroup) {
                adaptiveGroup += '}\n';
                groupTokens += adaptiveGroup;
                addedAdaptiveGroup = true;
            }
            if (needMap) {
                map += ');\n';
                groupTokens += map;
            }
        });
        if (adaptiveMode === 'onlyAdaptiveGroups') {
            groupTokens = adaptiveGroup;
        }
        return { variables: variables, groupTokens: groupTokens };
    }
    // неадаптивная группа
    groupTokens += "".concat(exports.mixinDeclaration[format](key, prefix), " {\n");
    if (needMap) {
        map += "".concat(exports.varDeclarations.scss(key, prefix), "--map: (\n");
    }
    Object.entries(token).forEach(function (_a) {
        var subKey = _a[0], subValue = _a[1];
        var varName = '';
        if (needUpdateVariables) {
            varName = "".concat(exports.varDeclarations.css(key, prefix), "--").concat((0, unCamelcasify_1.unCamelcasify)(subKey, '_'));
            variables += exports.variablesStatementDeclaration.css(varName, subValue);
        }
        groupTokens += defineStyleProperty(subKey, subValue, varName);
        if (needMap) {
            map += defineMapProperty(subKey, subValue);
        }
    });
    groupTokens += '}\n';
    if (needMap) {
        map += ');\n';
        groupTokens += map;
    }
    return { variables: variables, groupTokens: groupTokens };
}
exports.processGroupToken = processGroupToken;
var templateObject_1, templateObject_2, templateObject_3;
