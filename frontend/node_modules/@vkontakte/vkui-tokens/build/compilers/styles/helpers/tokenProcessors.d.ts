import { Adaptive } from '../../../../interfaces/general/tools';
export declare const EStyleTypes: {
    readonly CSS: "css";
    readonly SCSS: "scss";
    readonly PCSS: "pcss";
    readonly LESS: "less";
    readonly STYL: "styl";
};
export type Formats = (typeof EStyleTypes)[keyof typeof EStyleTypes];
export declare const varDeclarations: {
    readonly css: (prop: any, prefix?: string) => string;
    readonly pcss: (prop: any, prefix?: string) => string;
    readonly scss: (prop: any, prefix?: string) => string;
    readonly less: (prop: any, prefix?: string) => string;
    readonly styl: (prop: any, prefix?: string) => string;
};
export declare const variablesStatementDeclaration: {
    readonly css: (key: any, token: any, postfix?: string) => string;
    readonly pcss: (key: any, token: any, postfix?: string) => string;
    readonly scss: (key: any, token: any, postfix?: string) => string;
    readonly less: (key: any, token: any, postfix?: string) => string;
    readonly styl: (key: any, token: any, postfix?: string) => string;
};
export declare const mixinDeclaration: {
    readonly scss: (groupName: string, prefix?: string, postfix?: string) => string;
    readonly css: (groupName: string, prefix?: string, postfix?: string) => string;
    readonly pcss: (groupName: string, prefix?: string, postfix?: string) => string;
    readonly less: (groupName: string, prefix?: string, postfix?: string) => string;
    readonly styl: (groupName: string, prefix?: string, postfix?: string) => string;
};
export declare const customMediaDeclaration: {
    readonly css: any;
    readonly pcss: (key: any, token: any, postfix?: string) => string;
    readonly scss: (key: any, token: any, postfix?: string) => string;
    readonly less: (key: any, token: any, postfix?: string) => string;
    readonly styl: (key: any, token: any, postfix?: string) => string;
};
interface ProcessGroupTokenParams {
    format: Formats;
    token: Adaptive<Record<string, string | number>> | Record<string, string | number>;
    key: string;
    prefix: string;
    adaptiveMode?: 'none' | 'onlyAdaptiveGroups' | 'withAdaptiveGroups';
}
export declare function processGroupToken({ format, token, key, prefix, adaptiveMode, }: ProcessGroupTokenParams): {
    variables: string;
    groupTokens: string;
};
export {};
