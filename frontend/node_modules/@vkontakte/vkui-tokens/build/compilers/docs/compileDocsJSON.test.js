"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var globals_1 = require("@jest/globals");
var compileDocsJSON_1 = require("./compileDocsJSON");
(0, globals_1.describe)('compileDocsJSON', function () {
    (0, globals_1.it)('should correct compile documentation with reexported interface', function () {
        var docs = (0, compileDocsJSON_1.getTypeDocs)('src/build/compilers/docs/__test__/testRecursiveReexport.ts', 'BaseTheme');
        (0, globals_1.expect)(docs).toEqual({
            importedBaseProp: {
                desc: [
                    {
                        type: 'text',
                        text: 'Short desc tag',
                    },
                ],
                tags: ['tag1', 'tag2'],
            },
        });
    });
    (0, globals_1.it)('should correct compile documentation with jsdoc link', function () {
        var docs = (0, compileDocsJSON_1.getTypeDocs)('src/build/compilers/docs/__test__/testLinks.ts', 'BaseTheme');
        (0, globals_1.expect)(docs).toEqual({
            importedBaseProp: {
                desc: [
                    {
                        type: 'text',
                        text: 'Link with text ',
                    },
                    {
                        type: 'link',
                        url: 'https://google.com',
                        text: 'Google',
                    },
                    {
                        type: 'text',
                        text: '.\nLink without text ',
                    },
                    {
                        type: 'link',
                        url: 'https://google.com',
                        text: 'https://google.com',
                    },
                ],
                tags: [],
            },
        });
    });
    (0, globals_1.it)('should correct compile documentation with imports', function () {
        var docs = (0, compileDocsJSON_1.getTypeDocs)('src/build/compilers/docs/__test__/testTheme.ts', 'ThemeTest');
        (0, globals_1.expect)(docs).toEqual({
            prop: {
                desc: [],
                tags: ['empty description'],
            },
            propWithoutDoc: {
                desc: [],
                tags: [],
            },
            localBaseProp: {
                desc: [{ type: 'text', text: 'Empty tags' }],
                tags: [],
            },
            importedBaseProp: {
                desc: [{ type: 'text', text: 'Short desc tag' }],
                tags: ['tag1', 'tag2'],
            },
            derivedProp: {
                desc: [{ type: 'text', text: 'Long description tag' }],
                tags: ['tagListItem1', 'tagListItem2', 'tagListItem3'],
            },
        });
    });
});
