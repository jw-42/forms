import { Theme } from '../../../../interfaces/general';
import { Adaptive } from '../../../../interfaces/general/tools';
export type FlatValuesObject = {
    [key: string]: string | number;
};
export type AdaptiveValuesObject = {
    auto: FlatValuesObject;
    regular: FlatValuesObject;
} & {
    [key in keyof Exclude<Adaptive<any>, 'regular'>]?: FlatValuesObject;
};
interface Params<T = Theme> {
    theme: T;
}
interface ReturnValues {
    flatValues: FlatValuesObject;
    adaptiveValues: AdaptiveValuesObject;
}
export declare function accumulateValues<T = Theme>({ theme }: Params<T>): ReturnValues;
export {};
