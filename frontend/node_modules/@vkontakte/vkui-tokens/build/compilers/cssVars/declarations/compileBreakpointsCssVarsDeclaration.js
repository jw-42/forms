"use strict";
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.compileBreakpointsCssVarsDeclaration = void 0;
var common_tags_1 = require("common-tags");
var findViewportByAdaptivityState_1 = require("../helpers/findViewportByAdaptivityState");
var capitalize_1 = require("../../../helpers/capitalize");
var convertCamelToSnake_1 = require("../../../helpers/convertCamelToSnake");
var getOnlyColors_1 = require("../../../helpers/getOnlyColors");
var customMedia_1 = require("../../../themeProcessors/customMedia/customMedia");
var accumulateValues_1 = require("../helpers/accumulateValues");
var getVarString_1 = require("../helpers/getVarString");
/**
 * Компилирует медиаквери переходы между переменными
 * @param sourceTheme
 * @param type
 */
// eslint-disable-next-line sonarjs/cognitive-complexity
function compileBreakpointsCssVarsDeclaration(sourceTheme, type) {
    if (type === void 0) { type = 'default'; }
    if (!('breakpoints' in sourceTheme)) {
        return null;
    }
    var breakpoints = sourceTheme['breakpoints'];
    var customMedia = (0, customMedia_1.processCustomMedia)(sourceTheme);
    var theme = type === 'onlyColors' ? (0, getOnlyColors_1.getOnlyColors)(sourceTheme) : sourceTheme;
    var adaptiveValues = (0, accumulateValues_1.accumulateValues)({
        theme: theme,
    }).adaptiveValues;
    var result = '';
    if (!Object.keys(adaptiveValues.auto).length) {
        return null;
    }
    result += (0, common_tags_1.stripIndent)(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n\t:root {\n", "\n\t}"], ["\n\t:root {\n", "\n\t}"])), (0, getVarString_1.getVarString)({ valuesObject: adaptiveValues.auto, prefix: '\t\t' }));
    var adaptivityStatesLength = Object.keys(adaptiveValues).length;
    // только regular и auto
    if (adaptivityStatesLength === 2) {
        return result;
    }
    var regularValues = '';
    var mediaValues = '';
    Object.entries(adaptiveValues)
        .sort(function (_a) {
        var a = _a[0];
        return (a === 'regular' ? 1 : -1);
    })
        .forEach(function (_a) {
        var adaptivityState = _a[0], valuesObject = _a[1];
        var isRegular = adaptivityState === 'regular';
        if (adaptivityState === 'auto') {
            return;
        }
        var usedViewport = (0, findViewportByAdaptivityState_1.findViewportByAdaptivityState)(breakpoints, adaptivityState);
        mediaValues += (0, common_tags_1.stripIndent)(templateObject_2 || (templateObject_2 = __makeTemplateObject(["\n\t\t\t@media ", " {\n\t\t\t\t:root, .vkui--force-auto {\n\t\t\t\t\t", "\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t.vkui--force-", " {\n\t\t\t\t", "\n\t\t\t}\n\t\t\t"], ["\n\t\t\t@media ", " {\n\t\t\t\t:root, .vkui--force-auto {\n\t\t\t\t\t", "\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t.vkui--force-", " {\n\t\t\t\t", "\n\t\t\t}\n\t\t\t"])), customMedia["width".concat((0, capitalize_1.capitalize)(usedViewport))], (0, common_tags_1.stripIndents)(isRegular
            ? regularValues
            : (0, getVarString_1.getVarString)({
                valuesObject: valuesObject,
                prefix: '',
                callback: function (name) {
                    if (isRegular) {
                        return;
                    }
                    var regularName = name.replace(new RegExp("".concat(adaptivityState, "$")), 'regular');
                    var regularValue = adaptiveValues.regular[regularName];
                    if (regularValue) {
                        regularValues += "".concat(regularName, ": ").concat(regularValue, ";\n");
                    }
                },
            })), (0, convertCamelToSnake_1.convertCamelToSnake)(usedViewport), (0, common_tags_1.stripIndents)(isRegular
            ? regularValues
            : (0, getVarString_1.getVarString)({
                valuesObject: valuesObject,
                prefix: '',
            })));
        mediaValues += '\n\n';
    });
    return (0, common_tags_1.stripIndent)("".concat(result, "\n\n").concat(mediaValues));
}
exports.compileBreakpointsCssVarsDeclaration = compileBreakpointsCssVarsDeclaration;
var templateObject_1, templateObject_2;
