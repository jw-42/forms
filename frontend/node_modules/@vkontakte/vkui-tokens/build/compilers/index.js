"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.writeTsFile = exports.writeStyleFiles = exports.writeStructJsonFile = exports.writeJsonFile = exports.writeDocsFiles = exports.writeCssVarsSourceMediaFile = exports.writeCssVarsSourceFile = exports.writeCssVarsJsUtils = void 0;
var node_path_1 = __importDefault(require("node:path"));
var fs_extra_1 = __importDefault(require("fs-extra"));
var compileGetDeclarationString_1 = require("./cssVars/jsUtils/compileGetDeclarationString");
var compileDocsJSON_1 = require("./docs/compileDocsJSON");
var compileJSON_1 = require("./json/compileJSON");
var compileStyles_1 = require("./styles/compileStyles");
var compileTypeScript_1 = require("./ts/compileTypeScript");
var capitalize_1 = require("../helpers/capitalize");
var compileBreakpointsCssVarsDeclaration_1 = require("./cssVars/declarations/compileBreakpointsCssVarsDeclaration");
var compileStructJSON_1 = require("./structJSON/compileStructJSON");
var cssModes = [
    { mode: 'default', fileName: 'index.css' },
    { mode: 'onlyVariables', fileName: 'onlyVariables.css' },
    { mode: 'onlyVariablesLocal', fileName: 'onlyVariablesLocal.css' },
    {
        mode: 'onlyVariablesLocalIncremental',
        fileName: 'onlyVariablesLocalIncremental.css',
    },
    { mode: 'onlyColors', fileName: 'onlyColors.css' },
    { mode: 'onlyAdaptiveGroups', fileName: 'onlyAdaptiveGroups.css' },
    { mode: 'noSizes', fileName: 'noSizes.css' },
    { mode: 'noColors', fileName: 'noColors.css' },
];
function writeStructJsonFile(themePath, theme, _) {
    console.log("\u043A\u043E\u043C\u043F\u0438\u043B\u0438\u0440\u0443\u0435\u043C \u0441\u0442\u0440\u0443\u043A\u0442\u0443\u0440\u043D\u044B\u0439 json...");
    var fileName = "struct.json";
    var filePath = node_path_1.default.resolve(themePath, fileName);
    var content = (0, compileStructJSON_1.compileStructJSON)(theme);
    fs_extra_1.default.writeFileSync(filePath, content);
    console.log("\u0443\u0441\u043F\u0435\u0448\u043D\u043E \u0437\u0430\u043F\u0438\u0441\u0430\u043B\u0438 \u0444\u0430\u0439\u043B ".concat(fileName));
}
exports.writeStructJsonFile = writeStructJsonFile;
function writeJsonFile(themePath, theme, _) {
    console.log("\u043A\u043E\u043C\u043F\u0438\u043B\u0438\u0440\u0443\u0435\u043C json...");
    var fileName = "index.json";
    var filePath = node_path_1.default.resolve(themePath, fileName);
    var content = (0, compileJSON_1.compileJSON)(theme);
    fs_extra_1.default.writeFileSync(filePath, content);
    console.log("\u0443\u0441\u043F\u0435\u0448\u043D\u043E \u0437\u0430\u043F\u0438\u0441\u0430\u043B\u0438 \u0444\u0430\u0439\u043B ".concat(fileName));
}
exports.writeJsonFile = writeJsonFile;
// eslint-disable-next-line max-params
function writeTsFile(themePath, theme, type, themeName) {
    console.log("\u043A\u043E\u043C\u043F\u0438\u043B\u0438\u0440\u0443\u0435\u043C ts...");
    var fileName = "index.ts";
    var filePath = node_path_1.default.resolve(themePath, fileName);
    var content = null;
    var sourceContent = (0, compileTypeScript_1.compileTypeScript)(theme);
    switch (type) {
        case 'flat':
            content = sourceContent
                .replace(/\$\$InterfaceName\$\$/g, "Theme".concat((0, capitalize_1.capitalize)(theme.themeName), "Flat"))
                .replace(/\$\$InterfaceURL\$\$/g, "@/interfaces/themes/".concat(theme.themeName));
            break;
        case 'subtheme':
            content = sourceContent
                .replace(/\$\$InterfaceName\$\$/g, "SubTheme".concat((0, capitalize_1.capitalize)(theme.parentThemeName)))
                .replace(/\$\$InterfaceURL\$\$/g, "@/interfaces/themes/".concat(theme.parentThemeName, "/subthemes"));
            break;
        case 'cssVars':
            content = sourceContent
                .replace(/\$\$InterfaceName\$\$/g, "Theme".concat((0, capitalize_1.capitalize)(themeName), "CssVars"))
                .replace(/\$\$InterfaceURL\$\$/g, "@/interfaces/themes/".concat(themeName));
            break;
        case 'root':
        default:
            content = sourceContent
                .replace(/\$\$InterfaceName\$\$/g, "Theme".concat((0, capitalize_1.capitalize)(theme.themeName)))
                .replace(/\$\$InterfaceURL\$\$/g, "@/interfaces/themes/".concat(theme.themeName));
    }
    fs_extra_1.default.writeFileSync(filePath, content);
    console.log("\u0443\u0441\u043F\u0435\u0448\u043D\u043E \u0437\u0430\u043F\u0438\u0441\u0430\u043B\u0438 \u0444\u0430\u0439\u043B ".concat(fileName));
}
exports.writeTsFile = writeTsFile;
function writeStyleFiles(themePath, theme) {
    var a = ['css', 'less', 'styl', 'scss', 'pcss'];
    a.forEach(function (format) {
        console.log("\u043A\u043E\u043C\u043F\u0438\u043B\u0438\u0440\u0443\u0435\u043C ".concat(format, "..."));
        var fileName = "index.".concat(format);
        var filePath = node_path_1.default.resolve(themePath, fileName);
        var content = (0, compileStyles_1.compileStyles)(format, theme);
        fs_extra_1.default.writeFileSync(filePath, content);
        console.log("\u0443\u0441\u043F\u0435\u0448\u043D\u043E \u0437\u0430\u043F\u0438\u0441\u0430\u043B\u0438 \u0444\u0430\u0439\u043B ".concat(fileName));
    });
}
exports.writeStyleFiles = writeStyleFiles;
// eslint-disable-next-line max-params
function writeCssVarsSourceFile(themePath, theme, 
// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
cssVarsTheme, themeBase) {
    var _a;
    console.log("\u043A\u043E\u043C\u043F\u0438\u043B\u0438\u0440\u0443\u0435\u043C \u0438\u0441\u0442\u043E\u0447\u043D\u0438\u043A\u0438 \u0434\u043B\u044F css vars \u0442\u0435\u043C...");
    for (var _i = 0, cssModes_1 = cssModes; _i < cssModes_1.length; _i++) {
        var modeConfig = cssModes_1[_i];
        var filePath = node_path_1.default.resolve(themePath, modeConfig.fileName);
        var compiledVars = (0, compileStyles_1.compileStyles)('css', theme, modeConfig.mode === 'default' ? 'withAdaptiveGroups' : modeConfig.mode, themeBase);
        var compiledBreakpoints = modeConfig.mode === 'default'
            ? "\n\n".concat((_a = (0, compileBreakpointsCssVarsDeclaration_1.compileBreakpointsCssVarsDeclaration)(cssVarsTheme)) !== null && _a !== void 0 ? _a : '')
            : '';
        if (compiledBreakpoints.includes('null')) {
            console.error(modeConfig);
            throw new Error('NULL');
        }
        var content = compiledVars + compiledBreakpoints;
        fs_extra_1.default.writeFileSync(filePath, content);
        console.log("\u0443\u0441\u043F\u0435\u0448\u043D\u043E \u0437\u0430\u043F\u0438\u0441\u0430\u043B\u0438 \u0444\u0430\u0439\u043B ".concat(modeConfig.fileName));
    }
}
exports.writeCssVarsSourceFile = writeCssVarsSourceFile;
function writeCssVarsSourceMediaFile(themePath, theme) {
    console.log("\u043A\u043E\u043C\u043F\u0438\u043B\u0438\u0440\u0443\u0435\u043C \u043C\u0435\u0434\u0438\u0430 \u043F\u0435\u0440\u0435\u043C\u0435\u043D\u043D\u044B\u0435 \u0434\u043B\u044F css vars \u0442\u0435\u043C...");
    var fileName = 'onlyMedia.css';
    var filePath = node_path_1.default.resolve(themePath, fileName);
    var content = (0, compileBreakpointsCssVarsDeclaration_1.compileBreakpointsCssVarsDeclaration)(theme);
    if (content !== null) {
        fs_extra_1.default.writeFileSync(filePath, content);
        console.log("\u0443\u0441\u043F\u0435\u0448\u043D\u043E \u0437\u0430\u043F\u0438\u0441\u0430\u043B\u0438 \u0444\u0430\u0439\u043B ".concat(fileName));
    }
}
exports.writeCssVarsSourceMediaFile = writeCssVarsSourceMediaFile;
function writeCssVarsJsUtils(themePath, theme) {
    console.log("\u043A\u043E\u043C\u043F\u0438\u043B\u0438\u0440\u0443\u0435\u043C \u0443\u0442\u0438\u043B\u0438\u0442\u044B \u0434\u043B\u044F js \u0434\u043B\u044F css vars \u0442\u0435\u043C...");
    [
        { mode: 'default', fileName: 'onlyVariables.ts' },
        { mode: 'onlyColors', fileName: 'onlyColors.ts' },
    ].forEach(function (_a) {
        var mode = _a.mode, fileName = _a.fileName;
        var filePath = node_path_1.default.resolve(themePath, fileName);
        var content = (0, compileGetDeclarationString_1.compileGetDeclarationString)(theme, mode);
        fs_extra_1.default.writeFileSync(filePath, content);
        console.log("\u0443\u0441\u043F\u0435\u0448\u043D\u043E \u0437\u0430\u043F\u0438\u0441\u0430\u043B\u0438 \u0444\u0430\u0439\u043B ".concat(fileName));
    });
}
exports.writeCssVarsJsUtils = writeCssVarsJsUtils;
function writeDocsFiles(themePath, theme) {
    console.log("\u043A\u043E\u043C\u043F\u0438\u043B\u0438\u0440\u0443\u0435\u043C \u0434\u043E\u043A\u0443\u043C\u0435\u043D\u0442\u0430\u0446\u0438\u044E...");
    var fileName = "docs.json";
    var filePath = node_path_1.default.resolve(themePath, fileName);
    var content = (0, compileDocsJSON_1.compileDocsJSON)(theme);
    fs_extra_1.default.writeFileSync(filePath, content);
    console.log("\u0443\u0441\u043F\u0435\u0448\u043D\u043E \u0437\u0430\u043F\u0438\u0441\u0430\u043B\u0438 \u0444\u0430\u0439\u043B ".concat(fileName));
}
exports.writeDocsFiles = writeDocsFiles;
