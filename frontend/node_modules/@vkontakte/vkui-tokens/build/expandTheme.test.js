"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var globals_1 = require("@jest/globals");
var expandTheme_1 = require("./expandTheme");
(0, globals_1.describe)('expandTheme', function () {
    (0, globals_1.describe)('expandRootTheme', function () {
        (0, globals_1.it)('should return specific props', function () {
            var result = (0, expandTheme_1.expandRootTheme)({
                colorsScheme: 'light',
                colors: {
                    colorOverlayPrimary: 'rgba(0, 0, 0, 0.48)',
                },
                someNewRandomToken: '3',
            });
            (0, globals_1.expect)(result).toStrictEqual({
                colorOverlayPrimary: {
                    active: 'rgba(0, 0, 0, 0.56)',
                    hover: 'rgba(0, 0, 0, 0.52)',
                    normal: 'rgba(0, 0, 0, 0.48)',
                },
                colorsScheme: 'light',
                someNewRandomToken: '3',
                themeType: 'root',
            });
        });
        (0, globals_1.it)('should work without colors', function () {
            var result = (0, expandTheme_1.expandRootTheme)({
                someNewRandomToken: '3',
                sizeArrow: {
                    regular: 3,
                },
            });
            (0, globals_1.expect)(result).toStrictEqual({
                sizeArrow: {
                    regular: 3,
                },
                someNewRandomToken: '3',
                themeType: 'root',
            });
        });
    });
    (0, globals_1.describe)('expandAll', function () {
        (0, globals_1.it)('should add specific prop theme', function () {
            var result = (0, expandTheme_1.expandAll)({
                colorsScheme: 'light',
                colors: {
                    colorOverlayPrimary: 'rgba(0, 0, 0, 0.48)',
                },
                someNewRandomToken: '3',
            });
            (0, globals_1.expect)(result.theme).not.toBeUndefined();
            (0, globals_1.expect)(result.theme.themeType).toBe('root');
        });
        (0, globals_1.it)('should add specific prop pixelifyTheme', function () {
            var result = (0, expandTheme_1.expandAll)({
                colorsScheme: 'light',
                colors: {
                    colorOverlayPrimary: 'rgba(0, 0, 0, 0.48)',
                },
                someNewRandomToken: '3',
            });
            (0, globals_1.expect)(result.pixelifyTheme).not.toBeUndefined();
            (0, globals_1.expect)(result.pixelifyTheme.themeType).toBe('pixelify');
        });
        (0, globals_1.it)('should pixelify in pixelifyTheme', function () {
            var result = (0, expandTheme_1.expandAll)({
                someNewRandomToken: '3',
                sizeArrow: {
                    regular: 3,
                },
            });
            (0, globals_1.expect)(result.pixelifyTheme.sizeArrow.regular).toBe('3px');
        });
        (0, globals_1.it)('should add specific prop cssVarsWide', function () {
            var result = (0, expandTheme_1.expandAll)({
                colorsScheme: 'light',
                colors: {
                    colorOverlayPrimary: 'rgba(0, 0, 0, 0.48)',
                },
                someNewRandomToken: '3',
            });
            (0, globals_1.expect)(result.cssVarsThemeWide).toStrictEqual({
                colorOverlayPrimary: {
                    active: {
                        name: '--vkui--color_overlay_primary--active',
                        originalValue: 'rgba(0, 0, 0, 0.56)',
                        value: 'var(--vkui--color_overlay_primary--active, rgba(0, 0, 0, 0.56))',
                    },
                    hover: {
                        name: '--vkui--color_overlay_primary--hover',
                        originalValue: 'rgba(0, 0, 0, 0.52)',
                        value: 'var(--vkui--color_overlay_primary--hover, rgba(0, 0, 0, 0.52))',
                    },
                    normal: {
                        name: '--vkui--color_overlay_primary',
                        originalValue: 'rgba(0, 0, 0, 0.48)',
                        value: 'var(--vkui--color_overlay_primary, rgba(0, 0, 0, 0.48))',
                    },
                },
                colorsScheme: {
                    name: '--vkui--colors_scheme',
                    originalValue: 'light',
                    value: 'var(--vkui--colors_scheme, light)',
                },
                someNewRandomToken: {
                    name: '--vkui--some_new_random_token',
                    originalValue: '3',
                    value: 'var(--vkui--some_new_random_token, 3)',
                },
                themeType: 'cssVarsWide',
            });
        });
        (0, globals_1.it)('should add specific prop cssVars', function () {
            var result = (0, expandTheme_1.expandAll)({
                colorsScheme: 'light',
                colors: {
                    colorOverlayPrimary: 'rgba(0, 0, 0, 0.48)',
                },
                someNewRandomToken: '3',
            });
            (0, globals_1.expect)(result.cssVarsTheme).toStrictEqual({
                colorOverlayPrimary: {
                    active: {
                        name: '--vkui--color_overlay_primary--active',
                        value: 'var(--vkui--color_overlay_primary--active, rgba(0, 0, 0, 0.56))',
                    },
                    hover: {
                        name: '--vkui--color_overlay_primary--hover',
                        value: 'var(--vkui--color_overlay_primary--hover, rgba(0, 0, 0, 0.52))',
                    },
                    normal: {
                        name: '--vkui--color_overlay_primary',
                        value: 'var(--vkui--color_overlay_primary, rgba(0, 0, 0, 0.48))',
                    },
                },
                colorsScheme: {
                    name: '--vkui--colors_scheme',
                    value: 'var(--vkui--colors_scheme, light)',
                },
                someNewRandomToken: {
                    name: '--vkui--some_new_random_token',
                    value: 'var(--vkui--some_new_random_token, 3)',
                },
                themeType: 'cssVars',
            });
        });
    });
});
