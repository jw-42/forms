"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.extractVarsNames = exports.getVariableName = void 0;
var convertCamelToSnake_1 = require("../../helpers/convertCamelToSnake");
var tokenHelpers_1 = require("../../helpers/tokenHelpers");
var customMedia_1 = require("../customMedia/customMedia");
var pixelifyValues_1 = require("../pixelifyValues/pixelifyValues");
function getVariableName(_a) {
    var key = _a.key, _b = _a.prefix, prefix = _b === void 0 ? 'vkui' : _b, mode = _a.mode;
    // для цветов не добавляем --normal в конец
    if (key === 'normal') {
        return "--".concat((0, convertCamelToSnake_1.convertCamelToSnake)(prefix));
    }
    return "--".concat((0, convertCamelToSnake_1.convertCamelToSnake)(prefix), "--").concat((0, convertCamelToSnake_1.convertCamelToSnake)(key)).concat(mode !== undefined && mode !== 'auto' ? "--".concat((0, convertCamelToSnake_1.convertCamelToSnake)(mode)) : '');
}
exports.getVariableName = getVariableName;
function defaultValueConstruct(name, value) {
    return value ? "var(".concat(name, ", ").concat(value, ")") : "var(".concat(name, ")");
}
function processVarNaming(_a) {
    var object = _a.object, mode = _a.mode, _b = _a.prefix, prefix = _b === void 0 ? 'vkui' : _b, customMedia = _a.customMedia, _c = _a.valueConstruct, valueConstruct = _c === void 0 ? defaultValueConstruct : _c;
    var result = {};
    // todo разнести на несколько функций вместо скипа
    // eslint-disable-next-line sonarjs/cognitive-complexity
    Object.keys(object).forEach(function (key) {
        var value = JSON.parse(JSON.stringify(object[key]));
        // не процессим некоторые свойства темы
        if (key === 'breakpoints') {
            result[key] = value;
            return;
        }
        if (key === 'themeType') {
            result[key] = 'cssVarsWide';
            return;
        }
        if (typeof value === 'undefined') {
            return;
        }
        // если это адаптивная переменная
        if (typeof value === 'object' && 'regular' in value) {
            var states = Object.keys(value);
            // если это адаптивный объект (например шрифты)
            if (typeof value.regular === 'object') {
                result[key] = __spreadArray(['auto'], states, true).reduce(function (acc, mode) {
                    var _a;
                    acc[mode] = processVarNaming({
                        object: (_a = value[mode]) !== null && _a !== void 0 ? _a : value.regular,
                        prefix: "".concat(prefix, "--").concat(key),
                        mode: mode,
                        customMedia: customMedia,
                        valueConstruct: valueConstruct,
                    });
                    return acc;
                }, {});
                return;
            }
            // обычная адаптивная переменная, нужно сформировать объект
            result[key] = __spreadArray(['auto'], states, true).reduce(function (acc, mode) {
                if (mode === 'auto') {
                    var name_1 = getVariableName({ key: key, prefix: prefix, mode: 'auto' });
                    acc[mode] = {
                        name: name_1,
                        value: valueConstruct(name_1),
                    };
                }
                else {
                    var name_2 = getVariableName({ key: key, prefix: prefix, mode: mode });
                    var originalValue = value[mode];
                    acc[mode] = {
                        name: name_2,
                        value: valueConstruct(name_2, originalValue),
                        originalValue: originalValue,
                    };
                }
                return acc;
            }, {});
            return;
        }
        if (typeof value === 'object') {
            result[key] = processVarNaming({
                object: value,
                prefix: "".concat(prefix, "--").concat(key),
                mode: mode,
                customMedia: customMedia,
                valueConstruct: valueConstruct,
            });
            return;
        }
        if (Object.keys(customMedia).includes(key)) {
            value = JSON.stringify(value);
        }
        var name = getVariableName({ key: key, prefix: prefix, mode: mode });
        result[key] =
            mode !== 'auto'
                ? {
                    name: name,
                    value: valueConstruct(name, value),
                    originalValue: value,
                }
                : {
                    name: name,
                    value: valueConstruct(name),
                };
    });
    return result;
}
/**
 * Процессор, который на основе темы, создаёт сложную структуру для CssVars темы
 */
function extractVarsNames(sourceTheme, opt) {
    if (opt === void 0) { opt = {}; }
    var typedSourceTheme = sourceTheme;
    var pixelifyedTheme = (0, pixelifyValues_1.pixelifyValues)(sourceTheme);
    var customMedia = (0, customMedia_1.processCustomMedia)(sourceTheme);
    return processVarNaming(__assign({ object: pixelifyedTheme, prefix: (0, tokenHelpers_1.staticRef)(typedSourceTheme.prefix), customMedia: customMedia }, opt));
}
exports.extractVarsNames = extractVarsNames;
