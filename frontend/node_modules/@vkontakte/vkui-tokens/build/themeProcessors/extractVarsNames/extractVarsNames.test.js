"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var globals_1 = require("@jest/globals");
var extractVarsNames_1 = require("./extractVarsNames");
(0, globals_1.describe)('extractVarsNames', function () {
    (0, globals_1.describe)('getVariableName', function () {
        (0, globals_1.it)('should work only with key param', function () {
            (0, globals_1.expect)((0, extractVarsNames_1.getVariableName)({ key: 'paddingBase' })).toBe('--vkui--padding_base');
        });
        (0, globals_1.it)('shoud work with custom prefix', function () {
            (0, globals_1.expect)((0, extractVarsNames_1.getVariableName)({ key: 'paddingBase', prefix: 'myParadigm' })).toBe('--my_paradigm--padding_base');
        });
        (0, globals_1.it)('should work with custom prefix with double hyphen', function () {
            (0, globals_1.expect)((0, extractVarsNames_1.getVariableName)({
                key: 'lineHeight',
                prefix: 'paradigm--fontH0',
            })).toBe('--paradigm--font_h0--line_height');
        });
        (0, globals_1.it)('shoud work with auto mode', function () {
            (0, globals_1.expect)((0, extractVarsNames_1.getVariableName)({ key: 'paddingBase', mode: 'auto' })).toBe('--vkui--padding_base');
        });
        (0, globals_1.it)('should work with nocamel mode', function () {
            (0, globals_1.expect)((0, extractVarsNames_1.getVariableName)({ key: 'paddingBase', mode: 'touch' })).toBe('--vkui--padding_base--touch');
        });
        (0, globals_1.it)('should work with camel mode', function () {
            (0, globals_1.expect)((0, extractVarsNames_1.getVariableName)({ key: 'paddingBase', mode: 'desktopS' })).toBe('--vkui--padding_base--desktop_s');
        });
    });
    (0, globals_1.describe)('mainFunction', function () {
        (0, globals_1.it)('should work with empty', function () {
            var theme = {};
            (0, globals_1.expect)((0, extractVarsNames_1.extractVarsNames)(theme)).toStrictEqual({});
        });
        (0, globals_1.it)('should not touch breakpoints', function () {
            var theme = {
                breakpoints: {
                    touch: {
                        breakpoint: 0,
                        adaptiveValue: 'compactX',
                    },
                    tablet: {
                        breakpoint: 300,
                        adaptiveValue: 'compact',
                    },
                    desktopS: {
                        breakpoint: 400,
                        adaptiveValue: 'regular',
                    },
                    desktopM: {
                        breakpoint: 500,
                        adaptiveValue: 'large',
                    },
                },
            };
            var expectedData = { breakpoints: __assign({}, theme.breakpoints) };
            (0, globals_1.expect)((0, extractVarsNames_1.extractVarsNames)(theme)).toStrictEqual(expectedData);
        });
        (0, globals_1.it)('should change type', function () {
            var theme = {
                themeType: 'root',
            };
            var expectedData = {
                themeType: 'cssVarsWide',
            };
            (0, globals_1.expect)((0, extractVarsNames_1.extractVarsNames)(theme)).toStrictEqual(expectedData);
        });
        (0, globals_1.it)('should work with flat values', function () {
            var theme = {
                x1: 4,
                x2: 8,
            };
            var expectedData = {
                x1: {
                    name: '--vkui--x1',
                    value: 'var(--vkui--x1, 4px)',
                    originalValue: '4px',
                },
                x2: {
                    name: '--vkui--x2',
                    value: 'var(--vkui--x2, 8px)',
                    originalValue: '8px',
                },
            };
            (0, globals_1.expect)((0, extractVarsNames_1.extractVarsNames)(theme)).toStrictEqual(expectedData);
        });
        (0, globals_1.it)('should ignore undefined values', function () {
            var theme = {
                // eslint-disable-next-line @typescript-eslint/ban-ts-comment
                // @ts-ignore
                x1: undefined,
            };
            var expectedData = {};
            (0, globals_1.expect)((0, extractVarsNames_1.extractVarsNames)(theme)).toStrictEqual(expectedData);
        });
        (0, globals_1.it)('should work with colors', function () {
            var theme = {
                colorTextAccent: {
                    normal: 'white',
                    hover: 'blue',
                    active: 'red',
                },
            };
            var expectedData = {
                colorTextAccent: {
                    normal: {
                        name: '--vkui--color_text_accent',
                        originalValue: 'white',
                        value: 'var(--vkui--color_text_accent, white)',
                    },
                    hover: {
                        name: '--vkui--color_text_accent--hover',
                        originalValue: 'blue',
                        value: 'var(--vkui--color_text_accent--hover, blue)',
                    },
                    active: {
                        name: '--vkui--color_text_accent--active',
                        originalValue: 'red',
                        value: 'var(--vkui--color_text_accent--active, red)',
                    },
                },
            };
            (0, globals_1.expect)((0, extractVarsNames_1.extractVarsNames)(theme)).toStrictEqual(expectedData);
        });
        (0, globals_1.it)('should work with viewports values', function () {
            var theme = {
                sizePopupBasePadding: {
                    compact: 16,
                    regular: 20,
                },
            };
            var expectedData = {
                sizePopupBasePadding: {
                    auto: {
                        name: '--vkui--size_popup_base_padding',
                        value: 'var(--vkui--size_popup_base_padding)',
                    },
                    compact: {
                        name: '--vkui--size_popup_base_padding--compact',
                        value: 'var(--vkui--size_popup_base_padding--compact, 16px)',
                        originalValue: '16px',
                    },
                    regular: {
                        name: '--vkui--size_popup_base_padding--regular',
                        value: 'var(--vkui--size_popup_base_padding--regular, 20px)',
                        originalValue: '20px',
                    },
                },
            };
            (0, globals_1.expect)((0, extractVarsNames_1.extractVarsNames)(theme)).toStrictEqual(expectedData);
        });
        (0, globals_1.it)('should work with complex flat values', function () {
            var theme = {
                variable: {
                    fontSize: 24,
                },
            };
            var expectedResult = {
                variable: {
                    fontSize: {
                        name: '--vkui--variable--font_size',
                        value: 'var(--vkui--variable--font_size, 24px)',
                        originalValue: '24px',
                    },
                },
            };
            (0, globals_1.expect)((0, extractVarsNames_1.extractVarsNames)(theme)).toStrictEqual(expectedResult);
        });
        (0, globals_1.it)('should work with complexity viewports values', function () {
            var theme = {
                fontH1: {
                    compact: {
                        fontSize: 24,
                        lineHeight: '32px',
                    },
                    regular: {
                        fontSize: 22,
                        lineHeight: '30px',
                    },
                },
            };
            var expectedData = {
                fontH1: {
                    auto: {
                        fontSize: {
                            name: '--vkui--font_h1--font_size',
                            value: 'var(--vkui--font_h1--font_size)',
                        },
                        lineHeight: {
                            name: '--vkui--font_h1--line_height',
                            value: 'var(--vkui--font_h1--line_height)',
                        },
                    },
                    compact: {
                        fontSize: {
                            name: '--vkui--font_h1--font_size--compact',
                            value: 'var(--vkui--font_h1--font_size--compact, 24px)',
                            originalValue: '24px',
                        },
                        lineHeight: {
                            name: '--vkui--font_h1--line_height--compact',
                            value: 'var(--vkui--font_h1--line_height--compact, 32px)',
                            originalValue: '32px',
                        },
                    },
                    regular: {
                        fontSize: {
                            name: '--vkui--font_h1--font_size--regular',
                            value: 'var(--vkui--font_h1--font_size--regular, 22px)',
                            originalValue: '22px',
                        },
                        lineHeight: {
                            name: '--vkui--font_h1--line_height--regular',
                            value: 'var(--vkui--font_h1--line_height--regular, 30px)',
                            originalValue: '30px',
                        },
                    },
                },
            };
            (0, globals_1.expect)((0, extractVarsNames_1.extractVarsNames)(theme)).toStrictEqual(expectedData);
        });
    });
    (0, globals_1.it)('should json stringify themeName and customMedia', function () {
        var theme = {
            breakpoints: {
                touch: {
                    breakpoint: 0,
                    adaptiveValue: 'compact',
                },
                desktopS: {
                    breakpoint: 768,
                    adaptiveValue: 'regular',
                },
            },
            themeName: 'kek',
            widthTouch: '(max-width: 300px)',
        };
        var expectedData = {
            breakpoints: {
                touch: {
                    breakpoint: 0,
                    adaptiveValue: 'compact',
                },
                desktopS: {
                    breakpoint: 768,
                    adaptiveValue: 'regular',
                },
            },
            themeName: {
                name: '--vkui--theme_name',
                value: 'var(--vkui--theme_name, kek)',
                originalValue: 'kek',
            },
            widthTouch: {
                name: '--vkui--width_touch',
                value: 'var(--vkui--width_touch, "(max-width: 300px)")',
                originalValue: '"(max-width: 300px)"',
            },
        };
        (0, globals_1.expect)((0, extractVarsNames_1.extractVarsNames)(theme)).toStrictEqual(expectedData);
    });
    (0, globals_1.it)('should work with custom construct', function () {
        var theme = {
            breakpoints: {
                touch: {
                    breakpoint: 0,
                    adaptiveValue: 'compact',
                },
                desktopS: {
                    breakpoint: 768,
                    adaptiveValue: 'regular',
                },
            },
            x1: 4,
            x2: 8,
        };
        var expectedData = {
            breakpoints: {
                touch: {
                    breakpoint: 0,
                    adaptiveValue: 'compact',
                },
                desktopS: {
                    breakpoint: 768,
                    adaptiveValue: 'regular',
                },
            },
            x1: {
                name: '--vkui--x1',
                value: '4px',
                originalValue: '4px',
            },
            x2: {
                name: '--vkui--x2',
                value: '8px',
                originalValue: '8px',
            },
        };
        // eslint-disable-next-line unicorn/consistent-function-scoping
        var valueConstruct = function (_, value) { return value; };
        (0, globals_1.expect)((0, extractVarsNames_1.extractVarsNames)(theme, { valueConstruct: valueConstruct })).toStrictEqual(expectedData);
    });
});
