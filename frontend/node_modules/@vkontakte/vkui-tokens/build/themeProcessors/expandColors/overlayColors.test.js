"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var globals_1 = require("@jest/globals");
var overlayColors_1 = require("./overlayColors");
(0, globals_1.describe)('overlayColors', function () {
    (0, globals_1.test)('overlay transparent on opaque in light color scheme', function () {
        (0, globals_1.expect)((0, overlayColors_1.overlayColors)('rgb(0,0,0)', 'rgba(255,255,255,.5)')({ colorsScheme: 'light' })).toEqual({
            normal: '#404040',
            hover: '#4D4D4D',
            active: '#5C5C5C',
        });
    });
    (0, globals_1.test)('overlay transparent on opaque in dark color scheme', function () {
        (0, globals_1.expect)((0, overlayColors_1.overlayColors)('rgb(0,0,0)', 'rgba(255,255,255,.5)')({ colorsScheme: 'dark' })).toEqual({
            normal: '#404040',
            hover: '#4D4D4D',
            active: '#5C5C5C',
        });
    });
    (0, globals_1.test)('overlay opaque on opaque', function () {
        (0, globals_1.expect)((0, overlayColors_1.overlayColors)('rgb(0,0,0)', 'rgb(255,255,255)')({ colorsScheme: 'light' })).toEqual({
            normal: '#FFFFFF',
            hover: '#F5F5F7',
            active: '#EBECEF',
        });
    });
    (0, globals_1.test)('overlay transparent custom states on opaque', function () {
        (0, globals_1.expect)((0, overlayColors_1.overlayColors)('rgb(0,0,0)', {
            normal: 'rgba(255,255,255,.5)',
            hover: 'rgba(255,255,255,.5)',
            active: 'rgba(255,255,255,.5)',
        })({ colorsScheme: 'light' })).toEqual({
            normal: '#404040',
            hover: '#404040',
            active: '#404040',
        });
    });
});
