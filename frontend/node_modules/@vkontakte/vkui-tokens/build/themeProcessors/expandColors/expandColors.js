"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getExpandedThemeColors = exports.expandColor = exports.colorStateMap = void 0;
var cssHelpers_1 = require("../../helpers/cssHelpers");
var mixColors_1 = require("./mixColors");
exports.colorStateMap = {
    light: '#00103D',
    dark: '#FFFFFF',
};
// параметры для состояний
var toneValueHover = 0.04;
var toneValueActive = 0.08;
var getColorWithStates = function (_a) {
    var colorArg = _a.colorArg, colorState = _a.colorState, toneValueActive = _a.toneValueActive, toneValueHover = _a.toneValueHover;
    // Исправляет hover и action цвета в темной теме для белого цвета
    if (typeof colorArg === 'string' &&
        colorArg.toLowerCase() === '#ffffff' &&
        colorState === '#FFFFFF') {
        return {
            normal: '#FFFFFF',
            hover: '#EBEDF0',
            active: '#D7D8DB',
        };
    }
    return {
        normal: colorArg,
        hover: (0, mixColors_1.mixColors)(colorArg, colorState, toneValueHover),
        active: (0, mixColors_1.mixColors)(colorArg, colorState, toneValueActive),
    };
};
function expandCallableColor(color, theme) {
    if (!(0, cssHelpers_1.isColorDescriptionCallable)(color)) {
        return color;
    }
    // TODO: Придумать, как избавиться от any
    return expandCallableColor(color(theme), theme);
}
function expandColor(color, theme) {
    color = expandCallableColor(color, theme);
    if ((0, cssHelpers_1.isColorWithStates)(color)) {
        return color;
    }
    var colorState = exports.colorStateMap[theme.colorsScheme];
    return getColorWithStates({
        colorArg: color,
        colorState: colorState,
        toneValueHover: toneValueHover,
        toneValueActive: toneValueActive,
    });
}
exports.expandColor = expandColor;
/**
 * Процессор, который формирует из описания темы (ThemeDescription)
 * цвета со всеми состояниями active, hover и normal
 *
 * (и добавляет эти состояния только тем цветам, которые там действительно нужны)
 */
function getExpandedThemeColors(colorsDescription) {
    var colorsScheme = colorsDescription.colorsScheme, colors = colorsDescription.colors;
    if (!colorsScheme || !colors) {
        return null;
    }
    var theme = {
        colorsScheme: colorsScheme,
    };
    Object.entries(colors).forEach(function (_a) {
        var key = _a[0], colorValue = _a[1];
        theme[key] = expandColor(colorValue, colorsDescription);
    });
    return theme;
}
exports.getExpandedThemeColors = getExpandedThemeColors;
