"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var globals_1 = require("@jest/globals");
var createPseudoRootFromCssVars_1 = require("./createPseudoRootFromCssVars");
(0, globals_1.describe)('createPseudoRootFromCssVars', function () {
    (0, globals_1.it)('should return new object', function () {
        var theme = {};
        var cssVarsTheme = {};
        (0, globals_1.expect)((0, createPseudoRootFromCssVars_1.createPseudoRootFromCssVars)(theme, cssVarsTheme)).not.toBe(theme);
    });
    (0, globals_1.it)('should change type', function () {
        var theme = {
            themeType: 'root',
        };
        var cssVarsTheme = {
            themeType: 'cssVars',
        };
        (0, globals_1.expect)((0, createPseudoRootFromCssVars_1.createPseudoRootFromCssVars)(theme, cssVarsTheme)).toStrictEqual({ themeType: 'pixelify' });
    });
    (0, globals_1.it)('should expand flat values', function () {
        var theme = {
            x1: 4,
            x2: 8,
        };
        var cssVarsTheme = {
            x1: {
                name: '--paradigm--x1',
                value: 'var(--paradigm--x1, 4px)',
            },
            x2: {
                name: '--paradigm--x2',
                value: 'var(--paradigm--x2, 8px)',
            },
        };
        var expectedResult = {
            x1: 'var(--paradigm--x1, 4px)',
            x2: 'var(--paradigm--x2, 8px)',
        };
        (0, globals_1.expect)((0, createPseudoRootFromCssVars_1.createPseudoRootFromCssVars)(theme, cssVarsTheme)).toStrictEqual(expectedResult);
    });
    (0, globals_1.it)('should expand adaptive values', function () {
        var theme = {
            sizePopupBasePadding: {
                compact: 16,
                regular: 20,
            },
        };
        var cssVarsTheme = {
            sizePopupBasePadding: {
                auto: {
                    name: '--vkui--size_popup_base_padding',
                    value: 'var(--vkui--size_popup_base_padding)',
                },
                compact: {
                    name: '--vkui--size_popup_base_padding--compact',
                    value: 'var(--vkui--size_popup_base_padding--compact, 16px)',
                },
                regular: {
                    name: '--vkui--size_popup_base_padding--regular',
                    value: 'var(--vkui--size_popup_base_padding--regular, 20px)',
                },
            },
        };
        var expectedResult = {
            sizePopupBasePadding: {
                compact: 'var(--vkui--size_popup_base_padding--compact, 16px)',
                regular: 'var(--vkui--size_popup_base_padding--regular, 20px)',
            },
        };
        (0, globals_1.expect)((0, createPseudoRootFromCssVars_1.createPseudoRootFromCssVars)(theme, cssVarsTheme)).toStrictEqual(expectedResult);
    });
    (0, globals_1.it)('should expand adaptive complex values', function () {
        var theme = {
            fontH1: {
                compact: {
                    fontSize: 24,
                    lineHeight: '32px',
                },
                regular: {
                    fontSize: 22,
                    lineHeight: '30px',
                },
            },
        };
        var cssVarsTheme = {
            fontH1: {
                auto: {
                    fontSize: {
                        name: '--vkui--font_h1--font_size',
                        value: 'var(--vkui--font_h1--font_size)',
                    },
                    lineHeight: {
                        name: '--vkui--font_h1--line_height',
                        value: 'var(--vkui--font_h1--line_height)',
                    },
                },
                compact: {
                    fontSize: {
                        name: '--vkui--font_h1--font_size--compact',
                        value: 'var(--vkui--font_h1--font_size--compact, 24px)',
                        originalValue: '24px',
                    },
                    lineHeight: {
                        name: '--vkui--font_h1--line_height--compact',
                        value: 'var(--vkui--font_h1--line_height--compact, 32px)',
                        originalValue: '32px',
                    },
                },
                regular: {
                    fontSize: {
                        name: '--vkui--font_h1--font_size--regular',
                        value: 'var(--vkui--font_h1--font_size--regular, 22px)',
                        originalValue: '22px',
                    },
                    lineHeight: {
                        name: '--vkui--font_h1--line_height--regular',
                        value: 'var(--vkui--font_h1--line_height--regular, 30px)',
                        originalValue: '30px',
                    },
                },
            },
        };
        var expectedResult = {
            fontH1: {
                compact: {
                    fontSize: cssVarsTheme.fontH1.compact.fontSize.value,
                    lineHeight: cssVarsTheme.fontH1.compact.lineHeight.value,
                },
                regular: {
                    fontSize: cssVarsTheme.fontH1.regular.fontSize.value,
                    lineHeight: cssVarsTheme.fontH1.regular.lineHeight.value,
                },
            },
        };
        (0, globals_1.expect)((0, createPseudoRootFromCssVars_1.createPseudoRootFromCssVars)(theme, cssVarsTheme)).toStrictEqual(expectedResult);
    });
    (0, globals_1.it)("shouldn't touch breakpoints", function () {
        var theme = {
            breakpoints: {
                touch: {
                    breakpoint: 0,
                    adaptiveValue: 'compact',
                },
                desktopS: {
                    breakpoint: 400,
                    adaptiveValue: 'regular',
                },
            },
        };
        var cssVarsTheme = {
            breakpoints: theme.breakpoints,
        };
        var expectedResult = {
            breakpoints: theme.breakpoints,
        };
        (0, globals_1.expect)((0, createPseudoRootFromCssVars_1.createPseudoRootFromCssVars)(theme, cssVarsTheme)).toStrictEqual(expectedResult);
    });
});
