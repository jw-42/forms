"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var globals_1 = require("@jest/globals");
var extractCssVarsStrict_1 = require("./extractCssVarsStrict");
(0, globals_1.describe)('extractCssVarsStrict', function () {
    (0, globals_1.it)('should work with empty object', function () {
        var testData = {};
        (0, globals_1.expect)((0, extractCssVarsStrict_1.extractCssVarsStrict)(testData)).toStrictEqual({});
    });
    (0, globals_1.it)('should not do anything with breakpoints', function () {
        var theme = {
            breakpoints: {
                touch: {
                    breakpoint: 0,
                    adaptiveValue: 'compactX',
                },
                tablet: {
                    breakpoint: 300,
                    adaptiveValue: 'compact',
                },
                desktopS: {
                    breakpoint: 400,
                    adaptiveValue: 'regular',
                },
                desktopM: {
                    breakpoint: 500,
                    adaptiveValue: 'large',
                },
            },
        };
        var expectedData = { breakpoints: __assign({}, theme.breakpoints) };
        (0, globals_1.expect)((0, extractCssVarsStrict_1.extractCssVarsStrict)(theme)).toStrictEqual(expectedData);
    });
    (0, globals_1.it)('should change type', function () {
        var theme = {
            themeType: 'cssVarsWide',
        };
        var expectResult = {
            themeType: 'cssVars',
        };
        (0, globals_1.expect)((0, extractCssVarsStrict_1.extractCssVarsStrict)(theme)).toStrictEqual(expectResult);
    });
    (0, globals_1.it)('should work with flat values', function () {
        var theme = {
            x1: {
                name: '--paradigm--x1',
                value: 'var(--paradigm--x1, 4px)',
                originalValue: '4px',
            },
        };
        var expectResult = {
            x1: {
                name: theme.x1.name,
                value: theme.x1.value,
            },
        };
        (0, globals_1.expect)((0, extractCssVarsStrict_1.extractCssVarsStrict)(theme)).toStrictEqual(expectResult);
    });
    (0, globals_1.it)('should work with adaprive breakpoints values', function () {
        var theme = {
            sizePopupBasePadding: {
                auto: {
                    name: '--vkui--size_popup_base_padding',
                    value: 'var(--vkui--size_popup_base_padding)',
                },
                compact: {
                    name: '--vkui--size_popup_base_padding--compact',
                    value: 'var(--vkui--size_popup_base_padding--compact, 16px)',
                    originalValue: '16px',
                },
                regular: {
                    name: '--vkui--size_popup_base_padding--regular',
                    value: 'var(--vkui--size_popup_base_padding--regular, 20px)',
                    originalValue: '20px',
                },
            },
        };
        var expectedResult = {
            sizePopupBasePadding: {
                auto: theme.sizePopupBasePadding.auto,
                compact: {
                    name: theme.sizePopupBasePadding.compact.name,
                    value: theme.sizePopupBasePadding.compact.value,
                },
                regular: {
                    name: theme.sizePopupBasePadding.regular.name,
                    value: theme.sizePopupBasePadding.regular.value,
                },
            },
        };
        (0, globals_1.expect)((0, extractCssVarsStrict_1.extractCssVarsStrict)(theme)).toStrictEqual(expectedResult);
    });
    (0, globals_1.it)('should with flat and adaptive values together', function () {
        var theme = {
            x1: {
                name: '--paradigm--x1',
                value: 'var(--paradigm--x1, 4px)',
                originalValue: '4px',
            },
            sizePopupBasePadding: {
                auto: {
                    name: '--vkui--size_popup_base_padding',
                    value: 'var(--vkui--size_popup_base_padding)',
                },
                compact: {
                    name: '--vkui--size_popup_base_padding--compact',
                    value: 'var(--vkui--size_popup_base_padding--compact, 16px)',
                    originalValue: '16px',
                },
                regular: {
                    name: '--vkui--size_popup_base_padding--regular',
                    value: 'var(--vkui--size_popup_base_padding--regular, 20px)',
                    originalValue: '20px',
                },
            },
        };
        var expectedResult = {
            x1: {
                name: theme.x1.name,
                value: theme.x1.value,
            },
            sizePopupBasePadding: {
                auto: theme.sizePopupBasePadding.auto,
                compact: {
                    name: theme.sizePopupBasePadding.compact.name,
                    value: theme.sizePopupBasePadding.compact.value,
                },
                regular: {
                    name: theme.sizePopupBasePadding.regular.name,
                    value: theme.sizePopupBasePadding.regular.value,
                },
            },
        };
        (0, globals_1.expect)((0, extractCssVarsStrict_1.extractCssVarsStrict)(theme)).toStrictEqual(expectedResult);
    });
});
