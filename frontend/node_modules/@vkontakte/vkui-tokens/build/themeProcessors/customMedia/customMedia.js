"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.processCustomMedia = exports.getCustomMediaKey = exports.getUsingViewports = void 0;
var capitalize_1 = require("../../helpers/capitalize");
var viewports_1 = require("../../../interfaces/general/tools/viewports");
var getUsingViewports = function (breakpoints) {
    var usingViewports = Object.keys(breakpoints);
    return usingViewports.sort(function (a, b) {
        return viewports_1.viewports.indexOf(a) > viewports_1.viewports.indexOf(b) ? 1 : -1;
    });
};
exports.getUsingViewports = getUsingViewports;
var getCustomMediaKey = function (layoutName, rule) {
    return "width".concat(rule ? (0, capitalize_1.capitalize)(rule) : '').concat((0, capitalize_1.capitalize)(layoutName));
};
exports.getCustomMediaKey = getCustomMediaKey;
function processCustomMedia(_a) {
    var breakpoints = _a.breakpoints;
    if (!breakpoints || Object.keys(breakpoints).length === 1) {
        return {};
    }
    // фильтрованные и сортированные по размеру вьюпорта брейкпоинты
    var usingViewports = (0, exports.getUsingViewports)(breakpoints);
    var result = {};
    usingViewports.forEach(function (viewport, index, array) {
        var _a, _b;
        if (viewport !== 'touch') {
            // больше теущего брейкпоинта
            result[(0, exports.getCustomMediaKey)(viewport, 'from')] =
                "(min-width: ".concat(breakpoints[viewport].breakpoint, "px)");
            // между текущим и следущим брейкпоинтом
            result[(0, exports.getCustomMediaKey)(viewport)] = "(min-width: ".concat(breakpoints[viewport].breakpoint, "px) and (max-width: ").concat(((_b = (_a = breakpoints[array[index + 1]]) === null || _a === void 0 ? void 0 : _a.breakpoint) !== null && _b !== void 0 ? _b : 0) - 1, "px)");
        }
        if (viewport === 'touch') {
            // меньше следующего
            result[(0, exports.getCustomMediaKey)(viewport)] = "(max-width: ".concat(breakpoints[array[index + 1]].breakpoint - 1, "px)");
        }
        var isLastKey = index === usingViewports.length - 1;
        if (!isLastKey) {
            // ширина до следующего брейкпоинта
            result[(0, exports.getCustomMediaKey)(viewport, 'to')] = "(max-width: ".concat(breakpoints[array[index + 1]].breakpoint - 1, "px)");
        }
        if (isLastKey) {
            // больше текущего
            result[(0, exports.getCustomMediaKey)(viewport)] = "(min-width: ".concat(breakpoints[viewport].breakpoint, "px)");
        }
    });
    return result;
}
exports.processCustomMedia = processCustomMedia;
