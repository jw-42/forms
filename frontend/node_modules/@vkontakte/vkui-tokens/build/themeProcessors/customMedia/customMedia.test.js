"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var globals_1 = require("@jest/globals");
var customMedia_1 = require("./customMedia");
(0, globals_1.describe)('customMedia', function () {
    (0, globals_1.describe)('getCustomMediaKey', function () {
        (0, globals_1.it)('should work as default', function () {
            (0, globals_1.expect)((0, customMedia_1.getCustomMediaKey)('touch')).toBe('widthTouch');
        });
        (0, globals_1.it)('should work with "to" rule', function () {
            (0, globals_1.expect)((0, customMedia_1.getCustomMediaKey)('desktopS', 'to')).toBe('widthToDesktopS');
        });
        (0, globals_1.it)('should work with "from" rule', function () {
            (0, globals_1.expect)((0, customMedia_1.getCustomMediaKey)('tablet', 'from')).toBe('widthFromTablet');
        });
    });
    (0, globals_1.describe)('getUsingViewports', function () {
        (0, globals_1.it)('should work with single breakpoint', function () {
            var breakpoints = {
                touch: {
                    breakpoint: 0,
                    adaptiveValue: 'compactX',
                },
                desktopS: {
                    breakpoint: 768,
                    adaptiveValue: 'regular',
                },
            };
            (0, globals_1.expect)((0, customMedia_1.getUsingViewports)(breakpoints)).toStrictEqual(['touch', 'desktopS']);
        });
        (0, globals_1.it)('should sort breakpoints', function () {
            var breakpoints = {
                touch: {
                    breakpoint: 0,
                    adaptiveValue: 'compactX',
                },
                desktopM: {
                    breakpoint: 1233,
                    adaptiveValue: 'large',
                },
                desktopS: {
                    breakpoint: 768,
                    adaptiveValue: 'regular',
                },
                tablet: {
                    breakpoint: 1000,
                    adaptiveValue: 'compact',
                },
            };
            (0, globals_1.expect)((0, customMedia_1.getUsingViewports)(breakpoints)).toStrictEqual([
                'touch',
                'tablet',
                'desktopS',
                'desktopM',
            ]);
        });
    });
    (0, globals_1.describe)('general', function () {
        (0, globals_1.it)('should work without breakpoints', function () {
            var testData = {};
            (0, globals_1.expect)((0, customMedia_1.processCustomMedia)(testData)).toStrictEqual({});
        });
        (0, globals_1.it)('should work 1 breakpoints', function () {
            var testData = {
                breakpoints: {
                    desktopS: { breakpoint: 0, adaptiveValue: 'regular' },
                },
            };
            var expectedResult = {};
            (0, globals_1.expect)((0, customMedia_1.processCustomMedia)(testData)).toStrictEqual(expectedResult);
        });
        (0, globals_1.it)('should correctly work with single breakpoint', function () {
            var testData = {
                breakpoints: {
                    touch: {
                        breakpoint: 0,
                        adaptiveValue: 'compact',
                    },
                    desktopS: {
                        breakpoint: 768,
                        adaptiveValue: 'regular',
                    },
                },
            };
            var expectedResult = {
                widthTouch: '(max-width: 767px)',
                widthDesktopS: '(min-width: 768px)',
                widthFromDesktopS: '(min-width: 768px)',
                widthToTouch: '(max-width: 767px)',
            };
            (0, globals_1.expect)((0, customMedia_1.processCustomMedia)(testData)).toStrictEqual(expectedResult);
        });
        (0, globals_1.it)('should correctly work with all breakpoints', function () {
            var testData = {
                breakpoints: {
                    touch: {
                        breakpoint: 0,
                        adaptiveValue: 'compactX',
                    },
                    tablet: {
                        breakpoint: 768,
                        adaptiveValue: 'compact',
                    },
                    desktopS: {
                        breakpoint: 1000,
                        adaptiveValue: 'regular',
                    },
                    desktopM: {
                        breakpoint: 1300,
                        adaptiveValue: 'large',
                    },
                    desktopL: {
                        breakpoint: 1600,
                        adaptiveValue: 'largeX',
                    },
                    desktopXL: {
                        breakpoint: 2200,
                        adaptiveValue: 'largeXX',
                    },
                },
            };
            var expectedResult = {
                widthTouch: '(max-width: 767px)',
                widthTablet: '(min-width: 768px) and (max-width: 999px)',
                widthDesktopS: '(min-width: 1000px) and (max-width: 1299px)',
                widthDesktopM: '(min-width: 1300px) and (max-width: 1599px)',
                widthDesktopL: '(min-width: 1600px) and (max-width: 2199px)',
                widthDesktopXL: '(min-width: 2200px)',
                widthFromTablet: '(min-width: 768px)',
                widthFromDesktopS: '(min-width: 1000px)',
                widthFromDesktopM: '(min-width: 1300px)',
                widthFromDesktopL: '(min-width: 1600px)',
                widthFromDesktopXL: '(min-width: 2200px)',
                widthToTouch: '(max-width: 767px)',
                widthToTablet: '(max-width: 999px)',
                widthToDesktopS: '(max-width: 1299px)',
                widthToDesktopM: '(max-width: 1599px)',
                widthToDesktopL: '(max-width: 2199px)',
            };
            (0, globals_1.expect)((0, customMedia_1.processCustomMedia)(testData)).toStrictEqual(expectedResult);
        });
    });
});
